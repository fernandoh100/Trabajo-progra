import matplotlib.pyplot as plt

###Plot()
#Probably one of the simplest methods of matplotlib is plot(). You just have to provide two lists of numbers, and it will plot the first one as the x-axis and the second one as the y-axis:
#The function ax specifies the width and height, and also the size of the plot.
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.plot([1,2,3,4],[1,8,27,64])
plt.show()

###Bar()
#This method allows you to create a bar plot in the same way as plot().
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
x = [1,2,3,4,5]
y = [23,17,35,29,12]
ax.bar(x,y)
plt.show()

###Set labels for the axis.
#With this method we can name each axis. 
#To show this, I will reuse my plot from plot().
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.plot([1,2,3,4],[1,8,27,64])
plt.xlabel("X axis (for example, Days)")
plt.ylabel("Y axis (for example, Euros)")
plt.show()

#Pie: The pie method plot the datas given as a pie chart. 
import matplotlib.pyplot as plt
labels = 'Social science' ,  'Engineering and Architecture', 'arts' ,'Sanitary' , 'Science'
percentage = [45.7 , 22.05 , 11.32 , 13.8, 7.13 ]

fig1, ax1 = plt.subplots()
ax1.pie(percentage,  labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')
plt.title('Percentage of students studying a degree')
plt.show()
#Polar: The polar method plot polar coordinates in python
import numpy as np

import matplotlib.pyplot as plot

 

fig  = plot.figure()

fig.add_subplot(211, projection='polar')
plot.title('Rose  of 6 petals ')
rads    = np.arange(0, (2*np.pi), 0.01)

 

a   = 2

b   = 2

k   = 6
for radian in rads:

    radius = a + (b*np.cos(k*radian))
    plot.polar(radian, radius, '.')
    
    
    
###Twin
#This method allows us to plot different values in axis y with respect to the same values represented in axis x.
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.plot([2,4,6,8,10], [1,3,5,7,9], color ='r')
ax1 =ax.twinx()
ax1.plot([2,4,6,8,10], [50,40,30,20,10])
plt.show()

#in this other example, we can see a more interesting plot, as we have represented temperature(ÂºC) in the x-axis,
vapor pressure in mmHg in the left y-axis and vapor pressure in atm in the right y-axis.
However, as the values found on the two y-axes are proportional, the resulting traces ore overlapped.
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.plot([0,10,20,30,40], [4.58,9.21,17.54,31.82,55.32])
ax1 =ax.twinx()
ax1.plot([0,10,20,30,40], [0.60,1.21,2.31,4.19,7.28], color = 'r')
plt.show()


