import matplotlib.pyplot as plt

###Plot()
#Probably one of the simplest methods of matplotlib is plot(). You just have to provide two lists of numbers, and it will plot the first one as the x-axis and the second one as the y-axis:
#The function ax specifies the width and height, and also the size of the plot.
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.plot([1,2,3,4],[1,8,27,64])
plt.show()

###Bar()
#This method allows you to create a bar plot in the same way as plot().
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
x = [1,2,3,4,5]
y = [23,17,35,29,12]
ax.bar(x,y)
plt.show()

###Set labels for the axis.
#With this method we can name each axis. 
#To show this, I will reuse my plot from plot().
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.plot([1,2,3,4],[1,8,27,64])
plt.xlabel("X axis (for example, Days)")
plt.ylabel("Y axis (for example, Euros)")
plt.show()

#Pie: The pie method plot the datas given as a pie chart. 
import matplotlib.pyplot as plt
labels = 'Social science' ,  'Engineering and Architecture', 'arts' ,'Sanitary' , 'Science'
percentage = [45.7 , 22.05 , 11.32 , 13.8, 7.13 ]

fig1, ax1 = plt.subplots()
ax1.pie(percentage,  labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')
plt.title('Percentage of students studying a degree')
plt.show()
#Polar: The polar method plot polar coordinates in python
import numpy as np

import matplotlib.pyplot as plot

 

fig  = plot.figure()

fig.add_subplot(211, projection='polar')
plot.title('Rose  of 6 petals ')
rads    = np.arange(0, (2*np.pi), 0.01)

 

a   = 2

b   = 2

k   = 6
for radian in rads:

    radius = a + (b*np.cos(k*radian))
    plot.polar(radian, radius, '.')
    
    
    
###Twin
#This method allows us to plot different values in axis y with respect to the same values represented in axis x. This helps us see how two different variables vary with respect to the another.
import matplotlib.pyplot as plt
fig = plt.figure()
#First, we plot the usual x and y axes (x = year, y = weight)
ax = fig.add_axes([0,0,1,1])
ax.plot([2010,2011,2012,2013,2014,2015,2016,2017,2018], [56,51,63,58,51,65,51,70,65])
plt.xlabel("Year")
#Now, introducing the method presented (twin), we create the new y axis (new variable = number of sweets eaten), which will share the x axis with the previous y axis
ax1 =ax.twinx()
ax1.plot([2010,2011,2012,2013,2014,2015,2016,2017,2018], [20,10,50,25,12,55,10,60,55], color = 'r')
#We can add a legend so that it is easier to visually distinguish the two y variables.
fig.legend(labels = ('Weight','Sweets eaten (in thousands)'), loc= 'upper left')
plt.show()


#in this other example, we can see another interesting plot, as the values found on the two y-axes are proportional, 
the resulting traces ore overlapped.
import matplotlib.pyplot as plt
fig = plt.figure()
#First, we plot the usual x and y axes (x = Temperature, y = vapor pressure in mmHg)
ax = fig.add_axes([0,0,1,1])
ax.plot([0,10,20,30,40], [4.58,9.21,17.54,31.82,55.32])
plt.xlabel("Temperature (ÂºC)")
#Now, introducing the method presented (twin), we create the new y axis (new variable = vapor pressure in atm), which will share the x axis with the previous y axis
ax1 =ax.twinx()
ax1.plot([0,10,20,30,40], [0.60,1.21,2.31,4.19,7.28], color = 'r')
#We can add a legend so that it is easier to visually distinguish the two y variables.
fig.legend(labels = ('Vapor pressure in mmHg','Vapor pressure in atm'), loc= 'upper left')
plt.show()


###Lim
#This method allows us to establish a limit value for either x or y. This means that, for example, if x was defined from 0 to 1000,
but in our program (or plot) we want to limit it so that it goes from 2-32, we could do so just by introducing this method.
#For our example, imagine having the mass of a group of objects whose weight has to be calculated and then represented in a graph, however, if an object's weight is higher than 45, the object is not of interest and it must be rejected.
import matplotlib.pyplot as plt
import numpy as np
import math as mt
#The mass of our objects go from 0 to 20 kg
l = np.arange(0,20)
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
#g is the value of gravity at the Earth's surface
g= 9.8
#weight = mass * gravity
n = l*g
#we plot the axes
ax.plot(l, n, color ='g')
#we only want to plot the objects whose weight is not higher than 45 kg.
plt.ylim(0,45)
plt.show()

